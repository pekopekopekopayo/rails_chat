<div class="chat-room-container">
  <div class="chat-header">
    <h2><%= @chat_room.name %></h2>
    <div class="header-actions">
      <%= link_to '방 목록', chat_rooms_path, class: 'btn-secondary' %>
    </div>
  </div>

  <div class="messages-container" id="messages">
    <!-- 메시지들이 여기에 표시됩니다 -->
  </div>

  <div class="message-input-container">
    <form id="message-form" class="message-form">
      <input type="hidden" id="chat-room-id" value="<%= @chat_room.id %>" />
      <div class="input-group">
        <input type="text" id="message-content" placeholder="메시지를 입력하세요..." required />
        <button type="submit" class="btn-send">전송</button>
      </div>
    </form>
  </div>
</div>

<%= content_for :head do %>
  <style>
    .chat-room-container {
      max-width: 900px;
      margin: 20px auto;
      height: calc(100vh - 40px);
      display: flex;
      flex-direction: column;
      background-color: white;
      border: 1px solid #ddd;
      border-radius: 10px;
      overflow: hidden;
    }

    .chat-header {
      background-color: #007bff;
      color: white;
      padding: 15px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .chat-header h2 {
      margin: 0;
      font-size: 1.5em;
    }

    .header-actions {
      display: flex;
      gap: 10px;
    }

    .messages-container {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
      background-color: #f8f9fa;
    }

    .message {
      margin-bottom: 15px;
      padding: 10px 15px;
      border-radius: 10px;
      background-color: white;
      border-left: 3px solid #007bff;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    .message-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 5px;
    }

    .username {
      font-weight: bold;
      color: #007bff;
    }

    .timestamp {
      font-size: 0.8em;
      color: #666;
    }

    .message-content {
      color: #333;
      line-height: 1.4;
    }

    .message-input-container {
      padding: 20px;
      background-color: white;
      border-top: 1px solid #ddd;
    }

    .message-form {
      display: flex;
    }

    .input-group {
      display: flex;
      width: 100%;
      gap: 10px;
    }

    #message-content {
      flex: 1;
      padding: 12px;
      border: 1px solid #ccc;
      border-radius: 25px;
      font-size: 16px;
      outline: none;
    }

    #message-content:focus {
      border-color: #007bff;
      box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .btn-send {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: 25px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
    }

    .btn-send:hover {
      background-color: #0056b3;
    }

    .btn-secondary {
      background-color: rgba(255,255,255,0.2);
      color: white;
      padding: 8px 16px;
      border: 1px solid rgba(255,255,255,0.3);
      border-radius: 5px;
      text-decoration: none;
      cursor: pointer;
      font-size: 14px;
    }

    .btn-secondary:hover {
      background-color: rgba(255,255,255,0.3);
    }

    .empty-messages {
      text-align: center;
      color: #666;
      font-style: italic;
      margin-top: 50px;
    }
  </style>
<% end %>

<script>
  document.addEventListener('turbo:load', function() {
    const form = document.getElementById('message-form');
    const messagesContainer = document.getElementById('messages');
    const contentInput = document.getElementById('message-content');
    const chatRoomId = document.getElementById('chat-room-id').value;

    let currentPage = 1;
    let hasMore = true;
    let isLoading = false;

    // 초기 메시지 로드
    loadMessages(1);

    // 메시지 로드 함수
    function loadMessages(page) {
      if (isLoading) return;
      isLoading = true;

      fetch(`/chat_rooms/${chatRoomId}/chats?page=${page}`, {
        headers: {
          'Accept': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (page === 1) {
          messagesContainer.innerHTML = '';
        }

        if (data.chats.length === 0 && page === 1) {
          messagesContainer.innerHTML = '<div class="empty-messages">아직 메시지가 없습니다. 첫 번째 메시지를 보내보세요!</div>';
        } else {
          // 메시지를 역순으로 추가 (최신이 아래)
          data.chats.reverse().forEach(chat => {
            addMessage(chat.username, chat.content, chat.created_at, false);
          });
        }

        hasMore = data.has_more;
        currentPage = data.current_page;
        isLoading = false;

        if (page === 1) {
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
      })
      .catch(error => {
        console.error('메시지 로드 실패:', error);
        isLoading = false;
      });
    }

    // Action Cable 연결 (signed token으로 안전하게 인증)
    const consumer = ActionCable.createConsumer(`/cable?token=<%= current_user_token %>`);
    let chatChannel;

    // 채널 구독
    function subscribeToChannel() {
      chatChannel = consumer.subscriptions.create(
        { channel: 'ChatChannel', room_id: chatRoomId },
        {
          connected() {
            console.log('Connected to ChatChannel');
          },

          disconnected() {
            console.log('Disconnected from ChatChannel');
          },

          received(data) {
            console.log('Received message:', data);
            addMessage(data.username, data.content, data.timestamp);
          },

          error(error) {
            console.error('Channel error:', error);
          }
        }
      );
    }

    // 메시지 전송
    form.addEventListener('submit', function(e) {
      e.preventDefault();

      const content = contentInput.value.trim();
      if (!content) return;

      // HTTP API로 메시지 전송 (소켓으로 실시간 브로드캐스트)
      fetch(`/chat_rooms/${chatRoomId}/chats`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          content: content
        })
      }).then(() => {
        contentInput.value = '';
      }).catch(error => {
        console.error('메시지 전송 실패:', error);
      });
    });

    // 메시지 UI 추가
    function addMessage(username, content, timestamp) {
      const messageDiv = document.createElement('div');
      messageDiv.className = 'message';
      messageDiv.innerHTML = `
        <div class="message-header">
          <span class="username">${escapeHtml(username)}</span>
          <span class="timestamp">${timestamp}</span>
        </div>
        <div class="message-content">${escapeHtml(content)}</div>
      `;

      // empty-messages 제거
      const emptyMessage = messagesContainer.querySelector('.empty-messages');
      if (emptyMessage) {
        emptyMessage.remove();
      }

      messagesContainer.appendChild(messageDiv);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // XSS 방지를 위한 HTML 이스케이프
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Enter 키로 전송
    contentInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        form.dispatchEvent(new Event('submit'));
      }
    });

    // 채널 구독 시작
    subscribeToChannel();

    // 페이지 떠날 때 연결 해제
    document.addEventListener('turbo:before-visit', function() {
      if (chatChannel) {
        consumer.subscriptions.remove(chatChannel);
      }
    });
  });
</script>
